{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tiny-ML@IES For full project details visit TinyML4PAD . What is this section about ? Consider a Black-Box where you are getting values from a proximity sensor, as a time-series data. You want to predict and do inference with those values for certain classes using best approaches, such just it is optimized to full possibility and doesn't create any overhead during real-time communications. You have the sensor and a microcontroller board (in this repository mostly everything is related to STM32-ULP). Contents Go to \"Data Collection and Annotation\" in About Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. about.md # Other markdown pages, images and other files.","title":"Tiny-ML@IES"},{"location":"#tiny-mlies","text":"For full project details visit TinyML4PAD .","title":"Tiny-ML@IES"},{"location":"#what-is-this-section-about","text":"Consider a Black-Box where you are getting values from a proximity sensor, as a time-series data. You want to predict and do inference with those values for certain classes using best approaches, such just it is optimized to full possibility and doesn't create any overhead during real-time communications. You have the sensor and a microcontroller board (in this repository mostly everything is related to STM32-ULP).","title":"What is this section about ?"},{"location":"#contents","text":"Go to \"Data Collection and Annotation\" in About","title":"Contents"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. about.md # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"Data Collection and Annotation One possible approach for data annotation after raw data collection from sensors: Label Studio Visit Label Studio An example of how configuration can be done in label-studio to represent different classes: <View> <Header value=\"Time Series classification\" style=\"font-weight: normal\"/> <Choices name=\"pattern\" toName=\"ts\"> <Choice value=\"Left_Prox\"/> </Choices> <TimeSeriesLabels name=\"label\" toName=\"ts\"> <Label value=\"phase_1\" background=\"red\"/> <Label value=\"phase_2\" background=\"green\"/> <Label value=\"phase_3\" background=\"yellow\"/> <Label value=\"phase_4\" background=\"blue\"/> </TimeSeriesLabels> <TimeSeries name=\"ts\" value=\"$Left_Prox\" valueType=\"url\"> <Channel column=\"Left_Prox\"/> </TimeSeries> </View> How the data looks like after annotation of each phase of a chewing sequence: Feature Engineering Transforming raw data into features The performance of ML models heavily depends on the relevance of the features used to train them. 5 processes in feature engineering: -->Feature Creation -->Feature Transformation -->Feature Extraction -->Feature Selection -->Feature Scaling","title":"Contents"},{"location":"about/#data-collection-and-annotation","text":"One possible approach for data annotation after raw data collection from sensors: Label Studio Visit Label Studio An example of how configuration can be done in label-studio to represent different classes: <View> <Header value=\"Time Series classification\" style=\"font-weight: normal\"/> <Choices name=\"pattern\" toName=\"ts\"> <Choice value=\"Left_Prox\"/> </Choices> <TimeSeriesLabels name=\"label\" toName=\"ts\"> <Label value=\"phase_1\" background=\"red\"/> <Label value=\"phase_2\" background=\"green\"/> <Label value=\"phase_3\" background=\"yellow\"/> <Label value=\"phase_4\" background=\"blue\"/> </TimeSeriesLabels> <TimeSeries name=\"ts\" value=\"$Left_Prox\" valueType=\"url\"> <Channel column=\"Left_Prox\"/> </TimeSeries> </View> How the data looks like after annotation of each phase of a chewing sequence:","title":"Data Collection and Annotation"},{"location":"about/#feature-engineering","text":"Transforming raw data into features The performance of ML models heavily depends on the relevance of the features used to train them. 5 processes in feature engineering: -->Feature Creation -->Feature Transformation -->Feature Extraction -->Feature Selection -->Feature Scaling","title":"Feature Engineering"}]}